#+title: Config.org
#+options: title:nil toc:nil
* Hints

- After modifications to this file do not forget to invoke =doom sync=.
- Edit code blocks with =C-c '= for code completion and the nifty features of the major emacs lisp mode.
- Do not forget to mark source blocks with =emacs-lisp= otherwise they do not get tangled into the resulting =config.el= file.

* Config.org

** User and email setup

** TODO get these from the environment

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp
(setq user-full-name "Markus Klink"
      user-mail-address "justjoheinz@gmail.com")
#+end_src

** Common lisp and roswell setup

#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin")))
(load (expand-file-name "~/.roswell/helper.el"))
#+end_src

** UI setup

Just use a nice and big font and the default theme. And do not display line number inside the buffer. Also enlarge the window to full screen on startup.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one
      doom-font (font-spec :family "Fira Code" :size 16)
      display-line-numbers-type nil)

(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** Company setup

I do not like to wait for code completion hence make the idle delay faster.

#+begin_src emacs-lisp
(setq company-idle-delay 0.2)
#+end_src

** Mac setup

Bind the CMD key to normal copy/cut/paste operations.

#+begin_src emacs-lisp
;; setup Mac keybindings for copy, paste, cut
(when (eq system-type 'darwin)
  (bind-key "s-x" 'kill-region)
  (bind-key "s-c" 'evil-yank)
  (bind-key "s-v" 'evil-paste-after)
)
#+end_src

** Olivetti mode

Enable olivetti mode for all text modes.

#+begin_src emacs-lisp
(use-package! olivetti
  :init
  (setq olivetti-body-width 100)
  :hook
  (text-mode . olivetti-mode))
#+end_src

** org mode setup

** TODO org mode setup needs more structure
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-journal-dir "~/org/journal/")
(setq org-roam-directory "~/org/roam/")
(setq org-agenda-files '("~/org/" "~/org/roam/" "~/org/journal/"))
(setq org-journal-time-format "")
(setq org-tag-alist '(("private" . ?p)
                      ("work"    . ?w)))
(setq org-log-into-drawer "LOGBOOK")
(setq org-journal-skip-carryover-drawers '("LOGBOOK"))
(require 'org-habit)
(require 'org-clock)
(after! org
  (setq org-agenda-files '("~/org" "~/org/roam" "~/org/journal"))
  (setq org-journal-enable-agenda-integration t)
  (setq org-tags-column 70)
  (org-agenda-files t)
  (setq org-latex-classes '(("article" "\\documentclass[11pt]{scrartcl}"
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                             ("\\paragraph{%s}" . "\\paragraph*{%s}")
                             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                            ("report" "\\documentclass[11pt]{scrreport}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                            ("book" "\\documentclass[11pt]{scrbook}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (add-to-list 'org-latex-packages-alist
               '("AUTO" "babel" t ("pdflatex")))
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  )

;; Insert a clocktable in each journal entry after creation
(defun journal-template ()
  (save-excursion
    (let ((template "\n\n#+BEGIN: clocktable :scope subtree :maxlevel 2\n#+END:\n\n[[https://odoo.inoio.de/web?#page=0&limit=80&view_type=list&model=hr.analytic.timesheet&action=731][goto ODOO]]"))
      (goto-char (point-max))
      (unless (search-backward template nil t)
        (insert template "\n\n")))))

(add-hook! org-journal-after-header-create #'journal-template)
(add-hook! org-mode auto-save-visited-mode)
(add-hook! 'auto-save-hook #'org-save-all-org-buffers)



(after! org-roam
  (org-roam-server-mode t))
#+end_src

* Misc

Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
   =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
