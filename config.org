#+title: Config.org
#+options: title:nil toc:nil

* Install

- It might be required to execute =M-x pdf-tools-install= when you first start doom emacs.

* Hints

- After modifications to this file do not forget to invoke =doom sync=.
- Edit code blocks with =C-c '= for code completion and the nifty features of the major emacs lisp mode.
- Do not forget to mark source blocks with =emacs-lisp= otherwise they do not get tangled into the resulting =config.el= file.

* Config.org

** Common lisp and roswell setup

#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin")))
(load! "helper" "~/.roswell")
#+end_src

** UI setup

Just use a nice and big font and the default theme. And do not display line number inside the buffer. Also enlarge the window to full screen height on startup. Cursor blinks since I usually have a hard time finding it on the screen. You can easily disable this by removing the line, if it is too disturbing.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one
      doom-font (font-spec :family "Fira Code" :size 16)
      display-line-numbers-type nil)

(add-to-list 'initial-frame-alist '(fullscreen . fullheight))
(add-to-list 'initial-frame-alist '(width . 90))

(blink-cursor-mode +1)
#+end_src


Additionally we can set the browser to the internal webkit browser if the xwidgets feature is available.

#+begin_src emacs-lisp
(when (featurep 'xwidget-internal)
  (setq browse-url-browser-function 'xwidget-webkit-browse-url))
#+end_src

Set up Alt-Cmd-left/right to switch between buffers:

#+begin_src emacs-lisp
(when IS-MAC
  (map! :desc "Switch to previous buffer" "<M-s-left>" 'previous-buffer
        :desc "Switch to next buffer" "<M-s-right>" 'next-buffer))
#+end_src

** Company setup

I do not like to wait for code completion hence make the idle delay faster.

#+begin_src emacs-lisp
(setq company-idle-delay 0.2)
#+end_src


** Scratch buffer

It is nice to be able to explore emacs lisp within the scratch buffer.

#+begin_src emacs-lisp
(setq initial-major-mode 'lisp-interaction-mode)
#+end_src

** Smartparens

I hate it when ='= and ="= are treated like pairs, because it disturbs my typing flow.

*** TODO fix ' - this does not work yet, and the config dies.

#+begin_src emacs-lisp
(after! smartparens
    (sp-pair "\"" nil :actions :rem))
#+end_src

** Mac setup

Bind the CMD key to normal copy/cut/paste operations.

#+begin_src emacs-lisp
(when IS-MAC
  (bind-key "s-x" 'kill-region)
  (bind-key "s-c" 'evil-yank)
  (bind-key "s-v" 'evil-paste-before)
)
#+end_src

** Olivetti mode

Enable olivetti mode for all text modes.

#+begin_src emacs-lisp
(use-package! olivetti
  :init
  (setq olivetti-body-width 100)
  :hook
  (text-mode . olivetti-mode))
#+end_src

** Restclient

Do not log rest resquest to *Messages*.

#+begin_src emacs-lisp
(setq restclient-log-request nil)
#+end_src

** org mode setup

** TODO org mode setup needs more structure
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-journal-dir "~/org/journal/")
(setq org-roam-directory "~/org/roam/")
(setq org-agenda-files '("~/org/" "~/org/roam/" "~/org/journal/"))
(setq org-journal-time-format "")
(setq org-tag-alist '(("private" . ?p)
                      ("work"    . ?w)))
(setq org-log-into-drawer "LOGBOOK")
(setq org-journal-skip-carryover-drawers '("LOGBOOK"))
(setq org-startup-with-inline-images t)
(require 'org-habit)
(after! org
  (add-to-list 'org-modules 'org-habit t)
  (setq org-agenda-files '("~/org" "~/org/roam" "~/org/journal"))
  (setq org-journal-enable-agenda-integration t)
  (setq org-tags-column 70)
  (org-agenda-files t)

  (setq org-latex-classes '(("article" "\\documentclass[11pt]{scrartcl}"
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                             ("\\paragraph{%s}" . "\\paragraph*{%s}")
                             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                            ("report" "\\documentclass[11pt]{scrreport}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                            ("book" "\\documentclass[11pt]{scrbook}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (add-to-list 'org-latex-packages-alist
               '("AUTO" "babel" t ("pdflatex")))
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
  )

;; Insert a clocktable in each journal entry after creation
(defun journal-template ()
  (save-excursion
    (let ((template "\n\n#+BEGIN: clocktable :scope subtree :maxlevel 2\n#+END:\n\n[[https://odoo.inoio.de/web?#page=0&limit=80&view_type=list&model=hr.analytic.timesheet&action=731][goto ODOO]]"))
      (goto-char (point-max))
      (unless (search-backward template nil t)
        (insert template "\n\n")))))

(add-hook! org-journal-after-header-create #'journal-template)
(add-hook! org-mode auto-save-visited-mode)
(add-hook! 'auto-save-hook #'org-save-all-org-buffers)

(after! (org-roam server)
  (org-roam-server-mode +1))
#+end_src

* Helper functions

#+begin_src emacs-lisp
(defun custom/kill-this-buffer ()
  "Kill the current buffer"
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'custom/kill-this-buffer)
#+end_src

* Various keybindings

=SPC j= for org-journal and clock functionality

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("j" . "journal") ;; org-journal bindings
        :desc "Create journal entry" "j" #'org-journal-new-entry
        :desc "Create scheduled entry" "J" #'org-journal-new-scheduled-entry
        :desc "Open current journal" "f" #'org-journal-open-current-journal-file
        :desc "Open previous entry" "<" #'org-journal-previous-entry
        :desc "Open next entry" ">" #'org-journal-next-entry
        :desc "Search journal" "s" #'org-journal-search-forever
        (:prefix ("t" . "tools")
                :desc "Export" "e" #'org-export-dispatch
                :desc "Agenda" "a" #'org-agenda-list
                )
        (:prefix ("c" . "clock/dates")
                :desc "Clock in" "i" #'org-clock-in
                :desc "Clock out" "o" #'org-clock-out
                :desc "Goto active clock" "g" #'org-clock-goto
                :desc "Insert timestamp" "t" #'org-time-stamp
                )
        (:prefix ("p" . "properties")
                :desc "Set property" "p" #'org-set-property
                )
        (:prefix ("r" . "roam")
                :desc "Find file" "f" #'org-roam-find-file
                )))
#+end_src


* Integrations with private information

You can toggle the inclusion of integration by commenting sections of the org file using =C-c ;= or by creating an empty dummy file.

** GCal integration

#+include: "+gcal.org"

** User integration

#+include: "+user.org"

** Finance data

#+include: "+finance.org"


* Misc

Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
   =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
