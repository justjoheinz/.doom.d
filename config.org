#+title: Config.org
#+options: title:nil toc:nil

* Install

- It might be required to execute =M-x pdf-tools-install= when you first start doom emacs.

* Hints

- After modifications to this file do not forget to invoke =doom sync=.
- Edit code blocks with =C-c '= for code completion and the nifty features of the major emacs lisp mode.
- Do not forget to mark source blocks with =emacs-lisp= otherwise they do not get tangled into the resulting =config.el= file.


* Config.org

** Super save mode

#+begin_src emacs-lisp
(use-package! super-save
  :ensure t
  :config
  (setq super-save-auto-save-when-idle t)
  (super-save-mode +1))
#+end_src


** Common lisp and roswell setup

#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin")))
(load! "helper" "~/.roswell")

;; setup log4sly
(load! "log4sly-setup" "~/.roswell/lisp/quicklisp")
(global-log4sly-mode 1)


(map! (:map sly-inspector-mode-map
       :n "q" #'sly-inspector-quit))

(after! sly
  (setq sly-complete-symbol-function 'sly-flex-completions)
  (setq sly-command-switch-to-existing-lisp 'ask)
  (set-popup-rules!
   '(("^\\*sly-mrepl"
      :side left
      :width 200
      :quit nil
      :ttl nil))))

(add-hook! 'sly-mode-hook
          (lambda ()
            (unless (sly-connected-p)
              (save-excursion (sly)))))
#+end_src

#+RESULTS:

** UI setup

Just use a nice and big font and the default theme. And do not display line number inside the buffer. Also enlarge the window to full screen height on startup. Cursor blinks since I usually have a hard time finding it on the screen. You can easily disable this by removing the line, if it is too disturbing.

#+begin_src emacs-lisp
(setq doom-theme 'doom-monokai-pro
      doom-font (font-spec :family "Fira Code" :size 14)
      display-line-numbers-type nil
;; font stuff
      doom-themes-enable-bold t
      doom-themes-enable-italic t
;; icon
      fancy-splash-image (concat doom-private-dir "icon.png")
;; default browser
      browse-url-browser-function 'xwidget-webkit-browse-url)

(add-to-list 'initial-frame-alist '(fullscreen . fullheight))
(add-to-list 'initial-frame-alist '(width . 90))
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

;; enable blinking cursor
(blink-cursor-mode +1)
;; do not stop blinking when idle
(setq blink-cursor-blinks 0)
;; ispell dictionary
(setq ispell-dictionary "german8")
(map! :desc "flyspell-word" "C-M-y" 'flyspell-correct-word-before-point
      :desc "flyspell-buffer" "<M-f8>" 'flyspell-buffer)
#+end_src

#+RESULTS:


Set up Alt-Cmd-left/right to switch between buffers:

#+begin_src emacs-lisp
(when IS-MAC
  (map! :desc "Switch to previous buffer" "<M-s-left>" 'previous-buffer
        :desc "Switch to next buffer" "<M-s-right>" 'next-buffer))
#+end_src

Setup "C-d" to duplicate a line:

#+begin_src emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(map! :after evil
      :map evil-motion-state-map
      "C-d" nil)
(map! :after evil
      :map evil-insert-state-map
      "C-d" nil)
(map! :after evil
      :map evil-replace-state-map
      "C-d" nil)
(map! :desc "Duplicate line" "C-d" #'duplicate-line)
#+end_src

#+RESULTS:

** User setup

#+begin_src emacs-lisp
(setq user-mail-address (getenv "EMAIL"))
#+end_src

#+RESULTS:
: justjoheinz@gmail.com

** Company setup

I do not like to wait for code completion hence make the idle delay faster.

#+begin_src emacs-lisp
(setq company-idle-delay 0.2)
#+end_src


** Scratch buffer

It is nice to be able to explore emacs lisp within the scratch buffer.

#+begin_src emacs-lisp
(setq initial-major-mode 'lisp-interaction-mode)
#+end_src

** Smartparens

I hate it when ='= and ="= are treated like pairs, because it disturbs my typing flow.

*** TODO fix ' - this does not work yet, and the config dies.

#+begin_src emacs-lisp
(after! smartparens
    (sp-pair "\"" nil :actions :rem))
#+end_src

** Mac setup

Bind the CMD key to normal copy/cut/paste operations.

#+begin_src emacs-lisp
(when IS-MAC
  (bind-key "s-x" 'kill-region)
  (bind-key "s-c" 'evil-yank)
  (bind-key "s-v" 'evil-paste-before-cursor-after)
)
#+end_src

** Frame and Window navigation

#+begin_src emacs-lisp
(framemove-default-keybindings)
(windmove-default-keybindings 'meta)
(setq framemove-hook-into-windmove t)
#+end_src

#+RESULTS:
: t


** Olivetti mode

Enable olivetti mode for all text modes.

#+begin_src emacs-lisp
(use-package! olivetti
  :init
  (setq olivetti-body-width 100)
  :hook
  (text-mode . olivetti-mode))
#+end_src

** Restclient

Do not log rest resquest to *Messages*.

#+begin_src emacs-lisp
(setq restclient-log-request nil)
#+end_src

** Helper functions

Kill the current buffer immediately without asking which buffer to kill.
#+begin_src emacs-lisp
(defun custom/kill-this-buffer ()
  "Kill the current buffer"
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'custom/kill-this-buffer)
#+end_src

Template function for new org-journal entries.

#+begin_src emacs-lisp
(defun custom/journal-template-header ()
  "Function to insert a clocktable after creating a new journal"
  (save-excursion
    (let* ((odoo-url "[[https://odoo.inoio.de/web?#page=0&limit=80&view_type=list&model=hr.analytic.timesheet&action=731][Buchen]]")
           (template (concat "\n\n"
                             "#+BEGIN: clocktable :scope subtree :maxlevel 2\n"
                             "#+END:\n\n"
                             "** TODO "
                             odoo-url
                             " :work:\n")))
      (insert template))))
#+end_src

#+RESULTS:
: custom/journal-template-header


** Calendar setup

#+begin_src emacs-lisp
(after! calfw
  (setq cfw:display-calendar-holidays nil
        calendar-week-start-day 1)
  )
#+end_src

#+RESULTS:
: 1

** org mode setup

** TODO org mode setup needs more structure
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-journal-dir "~/org/journal/")
(setq org-agenda-files '("~/org/" "~/org/roam/" "~/org/journal/"))
(setq org-journal-time-format "")
(setq org-tag-alist '(("private" . ?p)
                      ("work"    . ?w)))
(setq org-log-into-drawer "LOGBOOK")
(setq org-journal-skip-carryover-drawers '("LOGBOOK"))
(setq org-startup-with-inline-images t)
(setq org-hide-emphasis-markers t)
(require 'org-habit)
(after! org
  (add-to-list 'org-modules 'org-habit t)
  (setq org-agenda-files '("~/org" "~/org/roam" "~/org/journal"))
  (setq org-journal-enable-agenda-integration t)
  (setq org-tags-column 70)
  (org-agenda-files t)

  (setq org-latex-classes '(("article" "\\documentclass[11pt]{scrartcl}"
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                             ("\\paragraph{%s}" . "\\paragraph*{%s}")
                             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                            ("report" "\\documentclass[11pt]{scrreport}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                            ("book" "\\documentclass[11pt]{scrbook}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (add-to-list 'org-latex-packages-alist
               '("AUTO" "babel" t ("pdflatex")))
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
  )

; (add-hook! org-journal-after-header-create #'custom/journal-template-header)
; (add-hook! org-mode auto-save-visited-mode)
(add-hook! 'auto-save-hook #'org-save-all-org-buffers)
(use-package! org-roam
  :custom
  (org-roam-directory "~/org/roam")
  :config
  (org-roam-setup))

(defadvice! yeet/org-roam-in-own-workspace-a (&rest _)
  "Open all roam buffers in there own workspace."
  :before #'org-roam-node-find
  :before #'org-roam-node-random
  :before #'org-roam-buffer-display-dedicated
  :before #'org-roam-buffer-toggle
  (when (modulep! :ui workspaces)
    (+workspace-switch "*roam*" t)))
#+end_src

* Various keybindings

=SPC j= for org-journal and clock functionality

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("j" . "journal") ;; org-journal bindings
        :desc "Create journal entry" "j" #'org-journal-new-entry
        :desc "Create scheduled entry" "J" #'org-journal-new-scheduled-entry
        :desc "Open current journal" "f" #'org-journal-open-current-journal-file
        :desc "Open previous entry" "<" #'org-journal-previous-entry
        :desc "Open next entry" ">" #'org-journal-next-entry
        :desc "Search journal" "s" #'org-journal-search-forever
        (:prefix ("t" . "tools")
                :desc "Create export" "e" #'org-export-dispatch
                :desc "Open agenda" "a" #'org-agenda-list
                :desc "Open calendar" "c" #'cfw:open-org-calendar
                )
        (:prefix ("l" . "links")
                :desc "org-insert-link" "i" #'org-insert-link
                )
        (:prefix ("c" . "clock")
                :desc "org-clock-in" "i" #'org-clock-in
                :desc "org-clock-out" "o" #'org-clock-out
                :desc "org-clock-goto" "g" #'org-clock-goto
                )
        (:prefix ("d" . "dates")
                :desc "org-time-stamp" "t" #'org-time-stamp
                :desc "org-deadline" "d" #'org-deadline
                :desc "org-schedule" "s" #'org-schedule
                )
        (:prefix ("p" . "properties")
                :desc "org-set-property" "p" #'org-set-property
                )
        (:prefix ("r" . "roam")
                :desc "org-roam-node-find" "f" #'org-roam-node-find
                :desc "org-roam-node-insert" "i" #'org-roam-node-insert
                :desc "org-roam-buffer-toggle" "t" #'org-roam-buffer-toggle
                )))
#+end_src

#+RESULTS:
: org-roam-find-file

* haskell

#+begin_src emacs-lisp
(after! haskell
  (setq lsp-haskell-formatting-provider "ormolu")
  (setq haskell-tags-on-save t)
  (setq haskell-stylish-on-save t)
  (setq haskell-doc-mode t)
  (map! :map haskell-mode-map
        :localleader
        :desc "haskell-hoogle" "o" #'haskell-hoogle-lookup-from-local
        :desc "lsp-restart-workspace" "r" #'lsp-restart-workspace
  ))

(add-hook! 'haskell-mode-hook 'haskell-auto-insert-module-template)
(add-hook! 'haskell-mode-hook 'haskell-decl-scan-mode)
#+end_src

#+RESULTS:

* swagger client

Installed via packages.el

#+begin_src emacs-lisp
(use-package! swagg
  :config
  (setq
   swagg-definitions
   '((:name "Local"
      :yaml "http://localhost:5000/openapi.yml"
      :base "http://localhost:5000")
     (:name "GitHub"
      :json "https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json"
      :base "https://api.github.com")
     (:name "GitLab"
      :yaml "https://gitlab.com/gitlab-org/gitlab/-/raw/master/doc/api/openapi/openapi.yaml"
      :base "https://gitlab.com/api"))))

(defadvice! mk/swagg-in-own-workspace-a (&rest _)
  "Open all swagg buffers in there own workspace."
  :before #'swagg-request
  (when (modulep! :ui workspaces)
    (+workspace-switch "*swagg-result*" t)))


;; see https://github.com/isamert/swagg.el
;;
;; (setq
;;  swagg-definitions
;;  '((:name "..."
;;     :json "..."
;;     :base "..."
;;     ;; To bind query parameters:
;;     :query '((param1 . "somevalue")
;;              (param2 . "somevalue2"))
;;     ;; To bind headers:
;;     :header '((token . "12345")
;;               (another-header . "value"))
;;     ;; To bind anything with given name:
;;     :any ((param . "22")
;;           (token . "000")))
;;    ...))

#+end_src

#+RESULTS:

* graphviz

Installed via package.el


* Copilot

#+begin_src emacs-lisp
(use-package! copilot
  :config
  (setq copilot-node-executable "/Users/markusklink/.nodenv/versions/18.18.2/bin/node")
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src

* Misc

Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
   =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
